?matrix
matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)
x = matrix(c(1,2,3, 11,12,13), nrow = 2, ncol = 3)
x
x[1]
x[,1]
x[1,]
x[1,1] = 2
x
##
## Given a matrix x,
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) m <<- inverse
getInverse <- function() m
matrix(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
##
## Given a matrix x,
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
message("Clear")
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) {
message("Setting cache")
m <<- inverse
}
getInverse <- function() m
matrix(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x = makeCacheMatrix()
x = list()
x
x = list()
x[0]
x[1]
x = list(a,b,c)
x = list('a','b','c')
x
##
## Given a matrix x,
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
message("Clear")
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) {
message("Setting cache")
m <<- inverse
}
getInverse <- function() m
matrix(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = makeVector()
x
x.set(1)
x[1] = 1
##
## Given a matrix x,
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
message("Clear")
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) {
message("Setting cache")
m <<- inverse
}
getInverse <- function() m
matrix(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
message("Log")
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
x = makeVector()
x[1] = 1
x
##
## Given a matrix x,
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
message("Clear")
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) {
message("Setting cache")
m <<- inverse
}
getInverse <- function() m
mx(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x = makeCacheMatrix()
##
## Given a matrix x,
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
message("Clear")
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) {
message("Setting cache")
m <<- inverse
}
getInverse <- function() m
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
}
x = makeCacheMatrix()
x
x$getInverse()
x$setInverse(matrix(data=c(1,2,3,4)))
x$getInverse()
##
## Wrap a matrix into a cacheable matrix object using the list annotation
##
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
message("Clear")
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(inverse) {
message("Setting cache")
m <<- inverse
}
getInverse <- function() m
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
##
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getInverse()
if (!is.null(m))
{
message("Returning cached")
return(m);
}
data <- x$get()
m <- solve(data)
x$setInverse(m)
return(m)
}
x <- makeCacheMatrix(x = matrix(c(1,2,3,4,5,6)))
cacheSolve(x)
x <- makeCacheMatrix(x = matrix(c(1,2,3,4), nrow = 2, nco))
x <- makeCacheMatrix(x = matrix(c(1,2,3,4), nrow = 2, ncol = 2))
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
cacheSolve(x)
